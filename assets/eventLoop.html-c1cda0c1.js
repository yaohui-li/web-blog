import{_ as o,p,q as c,s as n,R as s,t as i,a3 as l,Z as t,n as u}from"./framework-053dfde5.js";const r={},d=n("h1",{id:"事件循环机制-event-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件循环机制-event-loop","aria-hidden":"true"},"#"),s(" 事件循环机制(event loop)")],-1),k=["src"],v=t(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>总所周知 javascript 是单线程的，将只有一个调用栈,同一时刻只能做一件事情。也就是说代码只能一段一段地执行。看看一个代码示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">multiply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> squared <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面脚本时 将 printSquare(4)压入执行栈中, 然后此函数运行时, 又将 square(n) 压入栈中, 当执行 square(n)时, 再将 multiply(a,b)压入栈中, 执行完 multiply(a,b)函数后出栈, 然后执行完 square(n)出栈, 最后执行完 printSquare(4), 执行栈清空。</p>`,4),m=["src"],h=t(`<p>思考一下如下代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=t(`<p>在真实场景显然不是这样函数的简单计算的, 我们遇到大量的图片加载、网络请求、大量数据循环等. 如果想上述那样的执行的显然是阻塞的, 影响浏览器页面渲染的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;There&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>， <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;JSConfEU&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码执行顺序是怎样的呢❓</p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>Hi &gt; JSConfEU &gt; There</p></details><p>你答对了吗？ 执行顺序为什么是这样呢？</p>`,5),g=["src"],f=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"步骤:"),n("ol",null,[n("li",null,'将 console.log("Hi")压入栈中执行，执行完后出栈'),n("li",null,"将 setTimeout 函数压入栈中执行, 执行中将 setTimeout 移入 webAPI 中,等待 5s 放入任务队列中"),n("li",null,'将 console.log("JSConfEU") 压入栈中执行, 执行完后出栈'),n("li",null,"等待五秒后将 setTimeout 的 callback 放入任务队列中"),n("li",null,"此时启动 event loop 机制 发现执行栈为空, 将 callback 放入执行中"),n("li",null,'执行 console.log("There")然后出栈')])],-1),_=n("h3",{id:"微任务-and-宏任务",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#微任务-and-宏任务","aria-hidden":"true"},"#"),s(" 微任务 And 宏任务")],-1);function w(a,q){const e=u("font");return p(),c("div",null,[d,n("img",{src:a.$withBase("/images/event-loop.jpg"),style:{width:"100%",height:"450px","object-fit":"contain"}},null,8,k),v,n("img",{src:a.$withBase("/images/call-stack.png")},null,8,m),h,n("p",null,[s("经上述讲解,显然会无限调用 foo(), 这样的话执行栈占用的空间将无限扩大, 此时浏览器会报错: "),i(e,{style:{color:"red"}},{default:l(()=>[s("RangeError: Maximum call stack size exceeded")]),_:1})]),b,n("img",{src:a.$withBase("/images/task-queue.png"),style:{width:"100%",height:"450px","object-fit":"contain"}},null,8,g),f,_])}const x=o(r,[["render",w],["__file","eventLoop.html.vue"]]);export{x as default};
