import{_ as p,p as o,q as c,s as n,R as s,t as i,a3 as l,Z as a,n as u}from"./framework-053dfde5.js";const r={},d=n("h1",{id:"事件循环机制-event-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件循环机制-event-loop","aria-hidden":"true"},"#"),s(" 事件循环机制(event loop)")],-1),k=["src"],v=a(`<h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>总所周知 javascript 是单线程的，将只有一个调用栈,同一时刻只能做一件事情。也就是说代码只能一段一段地执行。看看一个代码示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">multiply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> squared <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面脚本时 将 printSquare(4)压入执行栈中, 然后此函数运行时, 又将 square(n) 压入栈中, 当执行 square(n)时, 再将 multiply(a,b)压入栈中, 执行完 multiply(a,b)函数后出栈, 然后执行完 square(n)出栈, 最后执行完 printSquare(4), 执行栈清空。</p>`,4),m=["src"],h=a(`<p>思考一下如下代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=a(`<p>在真实场景显然不是这样函数的简单计算的, 我们遇到大量的图片加载、网络请求、大量数据循环等. 如果想上述那样的执行的显然是阻塞的, 影响浏览器页面渲染的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="微任务-and-宏任务" tabindex="-1"><a class="header-anchor" href="#微任务-and-宏任务" aria-hidden="true">#</a> 微任务 And 宏任务</h3>`,3);function f(e,_){const t=u("font");return o(),c("div",null,[d,n("img",{src:e.$withBase("/images/event-loop.jpg"),style:{width:"100%",height:"450px","object-fit":"contain"}},null,8,k),v,n("img",{src:e.$withBase("/images/call-stack.png")},null,8,m),h,n("p",null,[s("经上述讲解,显然会无限调用 foo(), 这样的话执行栈占用的空间将无限扩大, 此时浏览器会报错: "),i(t,{style:{color:"red"}},{default:l(()=>[s("RangeError: Maximum call stack size exceeded")]),_:1})]),b])}const y=p(r,[["render",f],["__file","eventLoop.html.vue"]]);export{y as default};
