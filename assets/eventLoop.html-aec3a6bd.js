import{_ as p,p as e,q as c,s as n,R as t,t as i,a3 as l,Z as a,n as u}from"./framework-053dfde5.js";const r={},k=n("h1",{id:"事件循环机制-event-loop",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#事件循环机制-event-loop","aria-hidden":"true"},"#"),t(" 事件循环机制(event loop)")],-1),d=["src"],v=a(`<h3 id="执行栈" tabindex="-1"><a class="header-anchor" href="#执行栈" aria-hidden="true">#</a> 执行栈</h3><p>总所周知 javascript 是单线程的，将只有一个调用栈,同一时刻只能做一件事情。也就是说代码只能一段一段地执行。看看一个代码示例:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">multiply</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">var</span> squared <span class="token operator">=</span> <span class="token function">square</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squared<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">printSquare</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行上面脚本时 将 printSquare(4)压入执行栈中, 然后此函数运行时, 又将 square(n) 压入栈中, 当执行 square(n)时, 再将 multiply(a,b)压入栈中, 执行完 multiply(a,b)函数后出栈, 然后执行完 square(n)出栈, 最后执行完 printSquare(4), 执行栈清空。</p>`,4),m=["src"],h=a(`<p>思考一下如下代码:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),b=a(`<p>在真实场景显然不是这样函数的简单计算的, 我们遇到大量的图片加载、网络请求、大量数据循环等. 如果想上述那样的执行的显然是阻塞的, 影响浏览器页面渲染的。</p><h3 id="任务队列" tabindex="-1"><a class="header-anchor" href="#任务队列" aria-hidden="true">#</a> 任务队列</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Hi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;There&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>， <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;JSConfEU&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述代码执行顺序是怎样的呢❓</p><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>Hi &gt; JSConfEU &gt; There</p></details><p>你答对了吗？ 执行顺序为什么是这样呢？</p>`,6),g=["src"],f=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"TIP"),n("p",null,"步骤:"),n("ol",null,[n("li",null,'将 console.log("Hi")压入栈中执行，执行完后出栈'),n("li",null,"将 setTimeout 函数压入栈中执行, 执行中将 setTimeout 移入 webAPI 中,等待 5s 放入任务队列中"),n("li",null,'将 console.log("JSConfEU") 压入栈中执行, 执行完后出栈'),n("li",null,"等待五秒后将 setTimeout 的 callback 放入任务队列中"),n("li",null,"此时启动 event loop 机制 发现执行栈为空, 将 callback 放入执行中"),n("li",null,'执行 console.log("There")然后出栈')])],-1),w=a(`<h3 id="微任务-and-宏任务" tabindex="-1"><a class="header-anchor" href="#微任务-and-宏任务" aria-hidden="true">#</a> 微任务 And 宏任务</h3><p>我先看看一道题, 思考一下执行顺序</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Promise<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">400</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary class="custom-container-title">答案</summary><p>100 400 300 200</p></details><p>如果你了解同步异步的话, 首先对先打印 100 和 400 是没有质疑的. 疑惑可能是先 300 然后打印 200. 这是因为异步执行分不同类型的任务. 有微任务和宏任务之分. 哪些是宏任务， 哪些是微任务呢？</p><ul><li><p>宏任务 setTimeout setInterval Ajax Dom 的监听事件 I/O</p></li><li><p>微任务 Promise.then async/await MutationObserver</p></li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> btn <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">&quot;#btn&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;microtask 1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
btn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&quot;click&quot;</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">queueMicrotask</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;microtask 2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 点击按钮btn元素 执行顺序是怎样呢？</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><details class="custom-container details"><summary class="custom-container-title">答案</summary></details>`,8),_=["src"],x=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"提示"),n("p",null,"在 Event Loop 时 会先检查微任务队列中有无任务, 有则将微任务队列中的任务放入执行栈中执行. 然后 Event Loop 会检查宏任务队列中有无任务, 有则将宏任务队列中的任务放入执行栈中执行.所以 setTimeout 要后 Promise.then 执行的原因")],-1),q=n("p",null,"思考一下 如果不是点击按钮, 而是脚本执行 btn.click()又会是怎样的执行顺序呢❓",-1),y=n("details",{class:"custom-container details"},[n("summary",{class:"custom-container-title"},"答案"),n("p",null,"1 > 2 > micotask 1 > microtask 2")],-1),j=n("p",null,"你知道为什么吗？",-1),T=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"原因"),n("p",null,"当通过 btn.click()执行时 会将宏任务打包成一个任务, 因此先执行 1 和 2 再执行微任务 micotask 1 microtask 2, 你也可以理解为将两个回调任务合并成一个回调任务")],-1);function B(s,M){const o=u("font");return e(),c("div",null,[k,n("img",{src:s.$withBase("/images/event-loop.jpg"),style:{width:"100%",height:"450px","object-fit":"contain"}},null,8,d),v,n("img",{src:s.$withBase("/images/call-stack.png")},null,8,m),h,n("p",null,[t("经上述讲解,显然会无限调用 foo(), 这样的话执行栈占用的空间将无限扩大, 此时浏览器会报错: "),i(o,{style:{color:"red"}},{default:l(()=>[t("RangeError: Maximum call stack size exceeded")]),_:1})]),b,n("img",{src:s.$withBase("/images/task-queue.png"),style:{width:"100%",height:"450px","object-fit":"contain"}},null,8,g),f,w,n("img",{src:s.$withBase("/images/microtask-queue.png"),style:{width:"100%",height:"450px","object-fit":"contain"}},null,8,_),x,q,y,j,T])}const S=p(r,[["render",B],["__file","eventLoop.html.vue"]]);export{S as default};
